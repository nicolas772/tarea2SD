// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_msgs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PozoManagementClient is the client API for PozoManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PozoManagementClient interface {
	GetMontoAcumulado(ctx context.Context, in *NewMontoAcumulado, opts ...grpc.CallOption) (*MontoAcumulado, error)
}

type pozoManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewPozoManagementClient(cc grpc.ClientConnInterface) PozoManagementClient {
	return &pozoManagementClient{cc}
}

func (c *pozoManagementClient) GetMontoAcumulado(ctx context.Context, in *NewMontoAcumulado, opts ...grpc.CallOption) (*MontoAcumulado, error) {
	out := new(MontoAcumulado)
	err := c.cc.Invoke(ctx, "/msgs.PozoManagement/GetMontoAcumulado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PozoManagementServer is the server API for PozoManagement service.
// All implementations must embed UnimplementedPozoManagementServer
// for forward compatibility
type PozoManagementServer interface {
	GetMontoAcumulado(context.Context, *NewMontoAcumulado) (*MontoAcumulado, error)
	mustEmbedUnimplementedPozoManagementServer()
}

// UnimplementedPozoManagementServer must be embedded to have forward compatible implementations.
type UnimplementedPozoManagementServer struct {
}

func (UnimplementedPozoManagementServer) GetMontoAcumulado(context.Context, *NewMontoAcumulado) (*MontoAcumulado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMontoAcumulado not implemented")
}
func (UnimplementedPozoManagementServer) mustEmbedUnimplementedPozoManagementServer() {}

// UnsafePozoManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PozoManagementServer will
// result in compilation errors.
type UnsafePozoManagementServer interface {
	mustEmbedUnimplementedPozoManagementServer()
}

func RegisterPozoManagementServer(s grpc.ServiceRegistrar, srv PozoManagementServer) {
	s.RegisterService(&PozoManagement_ServiceDesc, srv)
}

func _PozoManagement_GetMontoAcumulado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMontoAcumulado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PozoManagementServer).GetMontoAcumulado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msgs.PozoManagement/GetMontoAcumulado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PozoManagementServer).GetMontoAcumulado(ctx, req.(*NewMontoAcumulado))
	}
	return interceptor(ctx, in, info, handler)
}

// PozoManagement_ServiceDesc is the grpc.ServiceDesc for PozoManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PozoManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgs.PozoManagement",
	HandlerType: (*PozoManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMontoAcumulado",
			Handler:    _PozoManagement_GetMontoAcumulado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgs/msgs.proto",
}
